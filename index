<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RCPF v27.9 Launcher</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

```
    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }
    
    .container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 40px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        max-width: 500px;
        width: 100%;
        text-align: center;
    }
    
    .logo {
        font-size: 2.5em;
        font-weight: bold;
        color: #333;
        margin-bottom: 10px;
        background: linear-gradient(45deg, #667eea, #764ba2);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    
    .subtitle {
        color: #666;
        margin-bottom: 30px;
        font-size: 1.1em;
    }
    
    .launch-btn {
        background: linear-gradient(45deg, #ff6b6b, #ee5a24);
        color: white;
        border: none;
        padding: 20px 40px;
        font-size: 1.3em;
        font-weight: bold;
        border-radius: 50px;
        cursor: pointer;
        box-shadow: 0 10px 30px rgba(255, 107, 107, 0.3);
        transition: all 0.3s ease;
        margin-bottom: 20px;
        width: 100%;
    }
    
    .launch-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 15px 40px rgba(255, 107, 107, 0.4);
    }
    
    .launch-btn:active {
        transform: translateY(0);
    }
    
    .status {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 15px;
        margin: 20px 0;
        text-align: left;
        font-family: 'Monaco', 'Menlo', monospace;
        font-size: 0.9em;
        max-height: 200px;
        overflow-y: auto;
        display: none;
    }
    
    .form-group {
        margin: 15px 0;
        text-align: left;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 600;
        color: #333;
    }
    
    .form-group input, .form-group select {
        width: 100%;
        padding: 12px;
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        font-size: 1em;
        transition: border-color 0.3s;
    }
    
    .form-group input:focus, .form-group select:focus {
        outline: none;
        border-color: #667eea;
    }
    
    .step {
        display: none;
    }
    
    .step.active {
        display: block;
    }
    
    .progress {
        width: 100%;
        height: 6px;
        background: #e0e0e0;
        border-radius: 3px;
        margin: 20px 0;
        overflow: hidden;
    }
    
    .progress-bar {
        height: 100%;
        background: linear-gradient(45deg, #667eea, #764ba2);
        width: 0%;
        transition: width 0.5s ease;
    }
    
    .instance-card {
        background: #f8f9fa;
        border: 2px solid #e0e0e0;
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
        cursor: pointer;
        transition: all 0.3s ease;
        user-select: none;
    }
    
    .instance-card:hover {
        border-color: #667eea;
        background: #f0f4ff;
    }
    
    .instance-card.selected {
        border-color: #667eea;
        background: #f0f4ff;
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.2);
    }
    
    .instance-specs {
        font-size: 0.9em;
        color: #666;
        margin-top: 5px;
    }
    
    .price {
        font-weight: bold;
        color: #27ae60;
        font-size: 1.1em;
    }
    
    .next-btn, .back-btn {
        background: #667eea;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        cursor: pointer;
        margin: 5px;
        transition: background 0.3s;
    }
    
    .next-btn:disabled {
        background: #ccc;
        cursor: not-allowed;
    }
    
    .next-btn:hover:not(:disabled), .back-btn:hover {
        background: #5a6fd8;
    }
    
    .loading {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid #f3f3f3;
        border-top: 3px solid #667eea;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-right: 10px;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
```

</head>
<body>
    <div class="container">
        <div class="logo">RCPF v27.9</div>
        <div class="subtitle">One-Button Physics Computing Launcher</div>

```
    <div class="progress">
        <div class="progress-bar" id="progressBar"></div>
    </div>
    
    <!-- Step 1: Instance Selection -->
    <div class="step active" id="step1">
        <h3>Select GPU Cluster Provider & Configuration</h3>
        
        <div class="form-group">
            <label for="provider">üåê GPU Cloud Provider</label>
            <select id="provider">
                <option value="vast">Vast.ai (Recommended)</option>
                <option value="runpod">RunPod</option>
                <option value="lambda">Lambda Labs</option>
                <option value="coreweave">CoreWeave</option>
                <option value="paperspace">Paperspace</option>
                <option value="genesis">Genesis Cloud</option>
                <option value="custom">Custom Provider</option>
            </select>
        </div>
        
        <div id="instances">
            <div class="instance-card" data-instance="gb300-9x8">
                <div><strong>üöÄ 9x B300 Ultra Clusters (72 GPUs)</strong> <span class="price">~$648/hr</span></div>
                <div class="instance-specs">72x B300 ‚Ä¢ 20.7TB HBM3e ‚Ä¢ 576TB/s ‚Ä¢ 2.16 ExaFLOPS FP4 ‚Ä¢ NVLink mesh</div>
            </div>
            <div class="instance-card" data-instance="b300-4x8">
                <div><strong>‚ö° 4x B300 Ultra Clusters (32 GPUs)</strong> <span class="price">~$288/hr</span></div>
                <div class="instance-specs">32x B300 ‚Ä¢ 9.2TB HBM3e ‚Ä¢ 256TB/s ‚Ä¢ 960 PetaFLOPS FP4</div>
            </div>
            <div class="instance-card" data-instance="h200-9x8">
                <div><strong>üí™ 9x H200 Clusters (72 GPUs)</strong> <span class="price">~$152/hr</span></div>
                <div class="instance-specs">72x H200 ‚Ä¢ 10.1TB HBM3e ‚Ä¢ 345TB/s ‚Ä¢ Proven reliability</div>
            </div>
            <div class="instance-card" data-instance="h200-4x8">
                <div><strong>üéØ 4x H200 Clusters (32 GPUs)</strong> <span class="price">~$68/hr</span></div>
                <div class="instance-specs">32x H200 ‚Ä¢ 4.5TB HBM3e ‚Ä¢ 153TB/s ‚Ä¢ Cost effective</div>
            </div>
            <div class="instance-card" data-instance="h200-1x8">
                <div><strong>‚öôÔ∏è Single H200 Cluster (8 GPUs)</strong> <span class="price">~$17/hr</span></div>
                <div class="instance-specs">8x H200 ‚Ä¢ 1.1TB HBM3e ‚Ä¢ 38TB/s ‚Ä¢ Development/testing</div>
            </div>
            <div class="instance-card" data-instance="auto-scale">
                <div><strong>ü§ñ Auto-Scale Cluster (8-72 GPUs)</strong> <span class="price">Dynamic</span></div>
                <div class="instance-specs">Intelligent scaling ‚Ä¢ Cost optimized ‚Ä¢ Multi-provider fallback</div>
            </div>
        </div>
        <button class="next-btn" id="nextStep1" disabled>Next: API Keys</button>
    </div>
    
    <!-- Step 2: API Configuration -->
    <div class="step" id="step2">
        <h3>API Configuration</h3>
        <div class="form-group">
            <label for="xaiKey">xAI API Key (Grok)</label>
            <input type="password" id="xaiKey" placeholder="xai-xxxxxxxxxxxxxxxxx">
        </div>
        <div class="form-group">
            <label for="anthropicKey">Anthropic API Key (Claude)</label>
            <input type="password" id="anthropicKey" placeholder="sk-ant-xxxxxxxxxxxxxxxxx">
        </div>
        <div class="form-group">
            <label for="openaiKey">OpenAI API Key (Optional)</label>
            <input type="password" id="openaiKey" placeholder="sk-xxxxxxxxxxxxxxxxx">
        </div>
        <div class="form-group">
            <label for="rcpfSource">RCPF v27.9 Source</label>
            <select id="rcpfSource">
                <option value="github">GitHub Repository</option>
                <option value="docker">Docker Hub</option>
                <option value="local">Local Build</option>
                <option value="custom">Custom URL</option>
            </select>
        </div>
        <div class="form-group">
            <label for="persistentMemory">üíæ Persistent Memory Options</label>
            <select id="persistentMemory">
                <option value="nvlink">NVLink State Persistence (Recommended)</option>
                <option value="s3">S3 Snapshot Backup</option>
                <option value="local">Local Storage Only</option>
            </select>
        </div>
        <div class="form-group">
            <label for="autoScale">üîÑ Auto-Scale Policy</label>
            <select id="autoScale">
                <option value="cost">Cost Optimized (Pause when idle)</option>
                <option value="performance">Performance (Always on)</option>
                <option value="hybrid">Hybrid (Scale to B300 for complex tasks)</option>
            </select>
        </div>
        <div class="form-group" id="customUrlGroup" style="display:none;">
            <label for="customUrl">Custom RCPF URL</label>
            <input type="url" id="customUrl" placeholder="https://your-repo.com/rcpf-v27.9">
        </div>
        <button class="back-btn" onclick="showStep(1)">Back</button>
        <button class="next-btn" id="nextStep2">Next: Deploy</button>
    </div>
    
    <!-- Step 3: Deployment -->
    <div class="step" id="step3">
        <h3>Deploying RCPF v27.9</h3>
        <div class="status" id="deployStatus">
            <div>Initializing deployment...</div>
        </div>
        <button class="launch-btn" id="deployBtn">
            <span class="loading" id="loadingSpinner" style="display:none;"></span>
            üöÄ Launch RCPF v27.9
        </button>
        <div id="deploymentResult"></div>
        <button class="back-btn" onclick="showStep(2)">Back to Config</button>
    </div>
</div>

<script>
    let currentStep = 1;
    let selectedInstance = null;
    let deploymentConfig = {};

    // DOM loaded handler
    document.addEventListener('DOMContentLoaded', function() {
        initializeEventListeners();
    });

    function initializeEventListeners() {
        // Instance selection with better event handling
        const instanceCards = document.querySelectorAll('.instance-card');
        instanceCards.forEach(card => {
            card.addEventListener('click', function(e) {
                e.preventDefault();
                console.log('Instance card clicked:', this.dataset.instance);
                
                // Remove selection from all cards
                instanceCards.forEach(c => c.classList.remove('selected'));
                
                // Add selection to clicked card
                this.classList.add('selected');
                selectedInstance = this.dataset.instance;
                
                // Enable next button
                const nextBtn = document.getElementById('nextStep1');
                nextBtn.disabled = false;
                
                console.log('Selected instance:', selectedInstance);
            });
        });

        // Step navigation
        const nextStep1 = document.getElementById('nextStep1');
        const nextStep2 = document.getElementById('nextStep2');
        
        if (nextStep1) {
            nextStep1.addEventListener('click', () => {
                if (selectedInstance) {
                    showStep(2);
                }
            });
        }
        
        if (nextStep2) {
            nextStep2.addEventListener('click', () => showStep(3));
        }

        // RCPF source selection
        const rcpfSource = document.getElementById('rcpfSource');
        if (rcpfSource) {
            rcpfSource.addEventListener('change', function() {
                const customGroup = document.getElementById('customUrlGroup');
                if (this.value === 'custom') {
                    customGroup.style.display = 'block';
                } else {
                    customGroup.style.display = 'none';
                }
            });
        }

        // Deploy button
        const deployBtn = document.getElementById('deployBtn');
        if (deployBtn) {
            deployBtn.addEventListener('click', async function() {
                const btn = this;
                const spinner = document.getElementById('loadingSpinner');
                const status = document.getElementById('deployStatus');
                const result = document.getElementById('deploymentResult');
                
                btn.disabled = true;
                spinner.style.display = 'inline-block';
                status.style.display = 'block';
                
                // Collect configuration
                deploymentConfig = {
                    provider: document.getElementById('provider').value,
                    instance: selectedInstance,
                    xaiKey: document.getElementById('xaiKey').value,
                    anthropicKey: document.getElementById('anthropicKey').value,
                    openaiKey: document.getElementById('openaiKey').value,
                    rcpfSource: document.getElementById('rcpfSource').value,
                    customUrl: document.getElementById('customUrl').value,
                    persistentMemory: document.getElementById('persistentMemory').value,
                    autoScale: document.getElementById('autoScale').value
                };
                
                try {
                    await deployRCPF(deploymentConfig);
                } catch (error) {
                    logStatus(`‚ùå Deployment failed: ${error.message}`, 'error');
                    btn.disabled = false;
                    spinner.style.display = 'none';
                }
            });
        }
    }

    function showStep(step) {
        document.querySelectorAll('.step').forEach(s => s.classList.remove('active'));
        const targetStep = document.getElementById(`step${step}`);
        if (targetStep) {
            targetStep.classList.add('active');
        }
        currentStep = step;
        updateProgress();
    }

    function updateProgress() {
        const progress = ((currentStep - 1) / 2) * 100;
        const progressBar = document.getElementById('progressBar');
        if (progressBar) {
            progressBar.style.width = `${progress}%`;
        }
    }

    // Deployment functions
    async function deployRCPF(config) {
        logStatus(`üîç Scanning ${config.provider} for GPU clusters...`);
        
        await sleep(1000);
        const clusterInfo = parseClusterConfig(config.instance);
        logStatus(`‚úÖ Found ${clusterInfo.clusters}x clusters (${clusterInfo.totalGPUs} GPUs total)`);
        
        logStatus('üîê Configuring distributed environment...');
        await sleep(500);
        logStatus('‚úÖ Cluster environment configured');
        
        logStatus('üê≥ Preparing distributed Docker containers...');
        await sleep(1500);
        logStatus('‚úÖ Container orchestration prepared');
        
        logStatus('üì¶ Downloading RCPF v27.9 across clusters...');
        await downloadRCPFClusters(config, clusterInfo);
        
        logStatus('üöÄ Launching cluster network...');
        await launchClusterNetwork(config, clusterInfo);
        
        logStatus('üîó Setting up NVLink mesh topology...');
        await sleep(1500);
        logStatus('‚úÖ Inter-cluster communication established');
        
        logStatus('üåê Configuring access endpoints...');
        await sleep(1000);
        
        const clusterUrls = generateClusterURLs(config, clusterInfo);
        logStatus(`üéâ RCPF v27.9 cluster deployed successfully!`);
        logStatus(`üîó Main Interface: ${clusterUrls.main}`);
        logStatus(`üìä Cluster Monitor: ${clusterUrls.monitor}`);
        
        // Create cluster access interface
        const resultDiv = document.getElementById('deploymentResult');
        if (resultDiv) {
            resultDiv.innerHTML = `
                <div style="margin-top: 20px; padding: 20px; background: #e8f5e8; border-radius: 10px;">
                    <h4>üéâ ${clusterInfo.totalGPUs}-GPU Cluster Deployed!</h4>
                    <p><strong>Provider:</strong> ${config.provider}</p>
                    <p><strong>Configuration:</strong> ${clusterInfo.clusters}x clusters of 8 GPUs each</p>
                    <p><strong>Total Memory:</strong> ${clusterInfo.totalMemory}</p>
                    <p><strong>Main Interface:</strong> <a href="${clusterUrls.main}" target="_blank">${clusterUrls.main}</a></p>
                    <p><strong>Cluster Monitor:</strong> <a href="${clusterUrls.monitor}" target="_blank">${clusterUrls.monitor}</a></p>
                    <button onclick="window.open('${clusterUrls.main}', '_blank')" 
                            style="background: #27ae60; color: white; border: none; padding: 15px 30px; border-radius: 8px; font-size: 1.1em; cursor: pointer; margin: 10px 5px 0 0;">
                        üåê Open RCPF Interface
                    </button>
                    <button onclick="window.open('${clusterUrls.monitor}', '_blank')" 
                            style="background: #3498db; color: white; border: none; padding: 15px 30px; border-radius: 8px; font-size: 1.1em; cursor: pointer; margin: 10px 0 0 5px;">
                        üìä Monitor Clusters
                    </button>
                </div>
            `;
        }
        
        const spinner = document.getElementById('loadingSpinner');
        const deployBtn = document.getElementById('deployBtn');
        if (spinner) spinner.style.display = 'none';
        if (deployBtn) deployBtn.disabled = false;
        updateProgress();
        const progressBar = document.getElementById('progressBar');
        if (progressBar) progressBar.style.width = '100%';
    }

    function parseClusterConfig(instance) {
        const configs = {
            'gb300-9x8': { clusters: 9, totalGPUs: 72, totalMemory: '20.7TB HBM3e', architecture: 'B300 Ultra' },
            'b300-4x8': { clusters: 4, totalGPUs: 32, totalMemory: '9.2TB HBM3e', architecture: 'B300 Ultra' },
            'h200-9x8': { clusters: 9, totalGPUs: 72, totalMemory: '10.1TB HBM3e', architecture: 'H200' },
            'h200-4x8': { clusters: 4, totalGPUs: 32, totalMemory: '4.5TB HBM3e', architecture: 'H200' },
            'h200-1x8': { clusters: 1, totalGPUs: 8, totalMemory: '1.1TB HBM3e', architecture: 'H200' },
            'auto-scale': { clusters: 'dynamic', totalGPUs: '8-72', totalMemory: 'Variable', architecture: 'Auto' }
        };
        return configs[instance] || configs['h200-1x8'];
    }

    function generateClusterURLs(config, clusterInfo) {
        const baseUrl = config.provider === 'vast' ? 'vast-cluster' : `${config.provider}-cluster`;
        return {
            main: `http://${baseUrl}-main.${config.provider}.com:5000`,
            monitor: `http://${baseUrl}-monitor.${config.provider}.com:8080`
        };
    }

    async function downloadRCPFClusters(config, clusterInfo) {
        switch(config.rcpfSource) {
            case 'github':
                logStatus('üì• Cloning from GitHub...');
                await sleep(2000);
                break;
            case 'docker':
                logStatus('üì• Pulling from Docker Hub...');
                await sleep(1500);
                break;
            case 'local':
                logStatus('üì• Building from local source...');
                await sleep(3000);
                break;
            case 'custom':
                logStatus(`üì• Downloading from ${config.customUrl}...`);
                await sleep(2500);
                break;
        }
        logStatus('‚úÖ RCPF v27.9 downloaded and configured');
    }

    async function launchClusterNetwork(config, clusterInfo) {
        logStatus(`üéØ Reserving ${clusterInfo.clusters}x GPU clusters on ${config.provider}...`);
        await sleep(1000);
        logStatus('üîß Installing cluster orchestration...');
        await sleep(1500);
        logStatus('üê≥ Starting distributed containers...');
        await sleep(2000);
        logStatus('‚ö° Establishing NVLink mesh network...');
        await sleep(1500);
        logStatus('‚úÖ Cluster network launched successfully');
    }

    function logStatus(message, type = 'info') {
        const status = document.getElementById('deployStatus');
        if (!status) return;
        
        const timestamp = new Date().toLocaleTimeString();
        const color = type === 'error' ? 'red' : type === 'success' ? 'green' : '#333';
        
        status.innerHTML += `<div style="color: ${color};">[${timestamp}] ${message}</div>`;
        status.scrollTop = status.scrollHeight;
    }

    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // Auto-populate demo data for testing
    setTimeout(() => {
        if (window.location.search.includes('demo')) {
            const xaiKey = document.getElementById('xaiKey');
            const anthropicKey = document.getElementById('anthropicKey');
            if (xaiKey) xaiKey.value = 'xai-demo-key-xxxxxxxxxxxxxxxx';
            if (anthropicKey) anthropicKey.value = 'sk-ant-demo-key-xxxxxxxxxxxxxxxx';
        }
    }, 100);
</script>
```

</body>
</html>
